substitutions:
  name: esphome-web-320520
  friendly_name: smart garden

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  project:
    name: garden.esphome
    version: '1.0'
  on_boot:
    then:
      - delay: 10s
      - logger.log: Initialize state!
      - lambda: |-
          ESP_LOGD("on_boot", "restoring state");
          auto now = id(homeassistant_time).now();
          int hours = std::min(static_cast<int>(now.hour), static_cast<int>(id(hours_of_light_required).state));
          auto call = id(hours_of_light_elapsed).make_call();
          call.set_value(hours);
          call.perform();

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://fcrisciani/esphome-config/smart_garden/base.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# Example configuration entry
switch:
  - platform: gpio
    name: "Heating mat"
    id: heating_mat
    pin:
      number: 18
      inverted: true
  - platform: gpio
    name: "Growing lights"
    id: growing_light
    pin:
      number: 19
      inverted: true

# Example configuration entry
sensor:
  - platform: homeassistant
    name: "Growing light hours"
    entity_id: input_number.growing_lights_hours
    id: hours_of_light_required

number:
  - platform: template
    id: hours_of_light_elapsed
    max_value: 24
    min_value: 0
    initial_value: 0
    step: 1
    optimistic: true
    name: "Hours of growing light"
    icon: "mdi:vanity-light"

#sun:
#  latitude: 39.99032263939783
#  longitude: -105.11945941877684
#  id: "sun_state"
#  on_sunrise:
#    - then:
      
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 2
        minutes: 0
        hours: 0
        then: 
          - logger.log: Midnight reset!
          # Every midnight reset the light hours to 0.
          - number.set:
              id: hours_of_light_elapsed
              value: 0
      - seconds: 4
        minutes: /1
        then:
           - logger.log: 
              format: "Minute ticker, light state: %d, mat state: %d, hours of light: %d, hours required: %df"
              args: ['id(growing_light).state', 'id(heating_mat).state',  'static_cast<int>(id(hours_of_light_elapsed).state)', 'static_cast<int>(id(hours_of_light_required).state)' ]
           - if:
              condition:
                and:
                 - switch.is_off: growing_light
                 - lambda: 'return id(hours_of_light_elapsed).state < id(hours_of_light_required).state;'
              then:
                - switch.turn_on: growing_light
                - switch.turn_off: heating_mat
           - if:
              condition:
                and:
                 - switch.is_off: heating_mat
                 - lambda: 'return id(hours_of_light_elapsed).state > id(hours_of_light_required).state;'
              then:
                - switch.turn_off: growing_light
                - switch.turn_on: heating_mat
      - seconds: 0
        minutes: 0
        hours: /1
        then:
          - logger.log: 
              format: "Hour ticker, light state: %d, mat state: %d, hours of light: %d, hours required: %df"
              args: [ 'id(growing_light).state', 'id(heating_mat).state',  'static_cast<int>(id(hours_of_light_elapsed).state)', 'static_cast<int>(id(hours_of_light_required).state)' ] 
          - if:
              condition:
                switch.is_on: growing_light
              then:
                # Every hour reset the light hours to 0.
                - number.increment:
                    id: hours_of_light_elapsed
